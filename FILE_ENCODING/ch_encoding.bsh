#!/bin/bash

#############################################################
#	Change Encoding											#
#	Function : Finds encoding of file, changes it 			#
#	Destination encoding : Change DEST_ENC variable			#
#	Caution : ascii / binary remain as they are				#
#   													 	#		
#	Method : Uses file -bi to find encoding				 	#
#   Uses awk | cut to trim it, then changes it with iconv	#
#############################################################


#Constants
readonly 	ARGS_NBR=2
readonly 	THIS_JOB=${0##*/}

#Variables
declare 	FILE=$1
declare     FILE_ENC
declare     DEST_ENC=$2
declare 	pgm
declare 	mode


# Functions.
function chk_abnd()
{
  local     abnd
  
  abnd=$1
  date
  if [ $abnd -ne 0 ]; then
    echo "Failed with status " $abnd; echo
    #rm +++++++++++++
    exit $abnd
    #return $abnd
  else
    echo "Done"; echo
  fi
}

function chk_args()
{
  local        nbr_args=$1
  
  if [ $nbr_args -ne $ARGS_NBR ]; then
      echo "Wrong number of parameters = " $nbr_args
      exit 69
  else
	 echo "User has supplied the correct number of arguments"
     return 0
  fi
}

##################################################################
# Script Start
echo $THIS_JOB " started at " `date`; echo

echo "Checking number of arguments"
chk_args $#

# Find encoding of file, store it into FILE_ENC
FILE_ENC=`file -bi $FILE | awk '{print $2}' | cut -c9-`
echo "File : $FILE is $FILE_ENC \n"

# Check encoding of file and do work
if [[ "`echo $FILE_ENC`" == *ascii* || "`echo $FILE_ENC`" == *binary* ]]
then
	cat $FILE > $FILE.ot
	echo "File : $FILE is $FILE_ENC : Does not convert \n"
	echo " "
else
	iconv -f $FILE_ENC -t $DEST_ENC $FILE > $FILE.ot
	echo " "
fi

	
##############################################################
# Script end
echo $THIS_JOB " ended at " `date`; echo ;
#